name: Go CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # --- Format Check ---
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false
      - run: go install golang.org/x/tools/cmd/goimports@latest
      - name: Check Formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Error: Unformatted files found via gofmt."
            exit 1
          fi
          if [ -n "$(goimports -l .)" ]; then
            echo "Error: Unformatted files found via goimports."
            exit 1
          fi

  # --- Lint & Static Analysis ---
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v2.6.0
          sudo mv ./bin/golangci-lint /usr/local/bin/
      - run: golangci-lint run --timeout=5m

  # --- Security Scan ---
  security:
    name: Security Scan (Gosec)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false
      - uses: securego/gosec@master
        with:
          args: ./...

  # --- CodeQL Deep Security Analysis ---
  codeql:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    needs: security
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  # --- Run Unit and Integration Tests ---
  test:
    runs-on: ubuntu-latest
    needs: [format, lint, security, codeql]

    services:
      library-test-db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: library_test
        options: >-
          --health-cmd "pg_isready -U postgres -d library_test"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 20

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run Tests (via IP Lookup)
        run: |
          # Use the reliable IP lookup to bypass Go DNS/network failures
          DB_CONTAINER_ID=$(docker ps -qf "name=library-test-db")
          
          if [ -z "$DB_CONTAINER_ID" ]; then
            DB_CONTAINER_ID=$(docker ps -q --latest)
          fi

          DB_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$DB_CONTAINER_ID")

          if [ -z "$DB_IP" ]; then
            echo "Error: Failed to determine database IP address for testing."
            exit 1
          fi

          DB_URL="postgres://postgres:postgres@$DB_IP:5432/library_test?sslmode=disable"
          
          DATABASE_URL="$DB_URL" CGO_ENABLED=1 go test -v ./...

  # --- Build & Push Docker Image ---
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/library-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/library-api:${{ github.sha }}